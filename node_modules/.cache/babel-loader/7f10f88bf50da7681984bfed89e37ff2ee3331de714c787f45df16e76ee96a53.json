{"ast":null,"code":"// Register a service worker to serve assets from local cache.\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\nconst isLocalhost=()=>Boolean(window.location.hostname==='localhost'||// [::1] is the IPv6 localhost address.\nwindow.location.hostname==='[::1]'||// 127.0.0.1/8 is considered localhost for IPv4.\nwindow.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));let waitWindowLoad;// https://github.com/yyx990803/register-service-worker/pull/33#discussion_r394181861\nif(typeof window!=='undefined'){// Typically, a browser that supports `serviceWorker` should also have supported\n// `Promise`. But as this package can be used in environments without service\n// worker support (in that case it would do nothing), there's a chance that\n// `Promise` does not exist. So we must check for its existence first.\nif(typeof Promise!=='undefined'){waitWindowLoad=new Promise(resolve=>window.addEventListener('load',resolve));}else{waitWindowLoad={then:cb=>window.addEventListener('load',cb)};}}export function register(swUrl){let hooks=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const{registrationOptions={}}=hooks;delete hooks.registrationOptions;const emit=function(hook){if(hooks&&hooks[hook]){for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}hooks[hook](...args);}};if('serviceWorker'in navigator){waitWindowLoad.then(()=>{if(isLocalhost()){// This is running on localhost. Lets check if a service worker still exists or not.\ncheckValidServiceWorker(swUrl,emit,registrationOptions);navigator.serviceWorker.ready.then(registration=>{emit('ready',registration);}).catch(error=>handleError(emit,error));}else{// Is not local host. Just register service worker\nregisterValidSW(swUrl,emit,registrationOptions);navigator.serviceWorker.ready.then(registration=>{emit('ready',registration);}).catch(error=>handleError(emit,error));}});}}function handleError(emit,error){if(!navigator.onLine){emit('offline');}emit('error',error);}function registerValidSW(swUrl,emit,registrationOptions){navigator.serviceWorker.register(swUrl,registrationOptions).then(registration=>{emit('registered',registration);if(registration.waiting){emit('updated',registration);return;}registration.onupdatefound=()=>{emit('updatefound',registration);const installingWorker=registration.installing;installingWorker.onstatechange=()=>{if(installingWorker.state==='installed'){if(navigator.serviceWorker.controller){// At this point, the old content will have been purged and\n// the fresh content will have been added to the cache.\n// It's the perfect time to display a \"New content is\n// available; please refresh.\" message in your web app.\nemit('updated',registration);}else{// At this point, everything has been precached.\n// It's the perfect time to display a\n// \"Content is cached for offline use.\" message.\nemit('cached',registration);}}};};}).catch(error=>handleError(emit,error));}function checkValidServiceWorker(swUrl,emit,registrationOptions){// Check if the service worker can be found.\nfetch(swUrl).then(response=>{// Ensure service worker exists, and that we really are getting a JS file.\nif(response.status===404){// No service worker found.\nemit('error',new Error(\"Service worker not found at \".concat(swUrl)));unregister();}else if(response.headers.get('content-type').indexOf('javascript')===-1){emit('error',new Error(\"Expected \".concat(swUrl,\" to have javascript content-type, \")+\"but received \".concat(response.headers.get('content-type'))));unregister();}else{// Service worker found. Proceed as normal.\nregisterValidSW(swUrl,emit,registrationOptions);}}).catch(error=>handleError(emit,error));}export function unregister(){if('serviceWorker'in navigator){navigator.serviceWorker.ready.then(registration=>{registration.unregister();/*global emit*/}).catch(error=>handleError(emit,error));}}export default register;","map":{"version":3,"names":["isLocalhost","Boolean","window","location","hostname","match","waitWindowLoad","Promise","resolve","addEventListener","then","cb","register","swUrl","hooks","arguments","length","undefined","registrationOptions","emit","hook","_len","args","Array","_key","navigator","checkValidServiceWorker","serviceWorker","ready","registration","catch","error","handleError","registerValidSW","onLine","waiting","onupdatefound","installingWorker","installing","onstatechange","state","controller","fetch","response","status","Error","concat","unregister","headers","get","indexOf"],"sources":["C:/Users/Navee/OneDrive/Desktop/Web-Py/webdevcourse/ZtmWebdev/React/robofriends/src/registerServiceWorker.js"],"sourcesContent":["// Register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\nconst isLocalhost = () => Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nlet waitWindowLoad\n// https://github.com/yyx990803/register-service-worker/pull/33#discussion_r394181861\nif (typeof window !== 'undefined') {\n  // Typically, a browser that supports `serviceWorker` should also have supported\n  // `Promise`. But as this package can be used in environments without service\n  // worker support (in that case it would do nothing), there's a chance that\n  // `Promise` does not exist. So we must check for its existence first.\n  if (typeof Promise !== 'undefined') {\n    waitWindowLoad = new Promise(resolve => window.addEventListener('load', resolve))\n  } else {\n    waitWindowLoad = { then: (cb) => window.addEventListener('load', cb) }\n  }\n}\n\nexport function register (swUrl, hooks = {}) {\n  const { registrationOptions = {}} = hooks\n  delete hooks.registrationOptions\n\n  const emit = (hook, ...args) => {\n    if (hooks && hooks[hook]) {\n      hooks[hook](...args)\n    }\n  }\n\n  if ('serviceWorker' in navigator) {\n    waitWindowLoad.then(() => {\n      if (isLocalhost()) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, emit, registrationOptions)\n        navigator.serviceWorker.ready.then(registration => {\n          emit('ready', registration)\n        }).catch(error => handleError(emit, error))\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, emit, registrationOptions)\n        navigator.serviceWorker.ready.then(registration => {\n          emit('ready', registration)\n        }).catch(error => handleError(emit, error))\n      }\n    })\n  }\n}\n\nfunction handleError (emit, error) {\n  if (!navigator.onLine) {\n    emit('offline')\n  }\n  emit('error', error)\n}\n\nfunction registerValidSW (swUrl, emit, registrationOptions) {\n  navigator.serviceWorker\n    .register(swUrl, registrationOptions)\n    .then(registration => {\n      emit('registered', registration)\n      if (registration.waiting) {\n        emit('updated', registration)\n        return\n      }\n      registration.onupdatefound = () => {\n        emit('updatefound', registration)\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              emit('updated', registration)\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              emit('cached', registration)\n            }\n          }\n        }\n      }\n    })\n    .catch(error => handleError(emit, error))\n}\n\nfunction checkValidServiceWorker (swUrl, emit, registrationOptions) {\n  // Check if the service worker can be found.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (response.status === 404) {\n        // No service worker found.\n        emit('error', new Error(`Service worker not found at ${swUrl}`))\n        unregister()\n      } else if (response.headers.get('content-type').indexOf('javascript') === -1) {\n        emit('error', new Error(\n          `Expected ${swUrl} to have javascript content-type, ` +\n          `but received ${response.headers.get('content-type')}`))\n        unregister()\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, emit, registrationOptions)\n      }\n    })\n    .catch(error => handleError(emit, error))\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n      /*global emit*/\n    }).catch(error => handleError(emit, error))\n  }\n}\n\nexport default register;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}